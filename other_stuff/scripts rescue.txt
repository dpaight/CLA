
  function startup ( id = sessionStorage.getItem( "lastId" ) ) {
    $( "#spinner01" ).show();
    // id = getPointer();
    get_selGoals_from_server_clientSide();
    if ( id == undefined || id == null ) {
      google.script.run
        .withSuccessHandler( setPointerAndStart )
        .getFirstPointer();
    } else {
      // contactInfo(id);
      // focus(id);
      // console.log('current id at startup is %s', id);
      document.body.style.cursor = "wait";
      google.script.run
        .withSuccessHandler( showRosterTable )
        .getTableData_roster();
    }
    if ( sessionStorage.getItem( 'goals' ) === null ) {
      google.script.run
        .withSuccessHandler( haveGoals )
        .myGet( 'goals' );
    } else {
      var values = JSON.parse( sessionStorage.getItem( 'goals' ) );
      haveGoals( [ true, values, true, true, true, true ] );

    }

    focus( id );

  }
  function setPointerAndStart ( id ) {
    setPointer( id );
    //       console.log('setPointerAndStart ran');
    // await sleep(2000);
    document.body.style.cursor = "wait";
    google.script.run
      .withSuccessHandler( showRosterTable )
      .getTableData_roster( id );

    google.script.run.withSuccessHandler( showLog ).getLogEntries( id );

    focus( id );
  }

  //  = getPointer()
  function focus ( id ) {
    setPointer( id );
    contactInfo( id );
    appendSelectedGoals( id );
    if ( sessionStorage.getItem( "reclog" + id ) != null ) {
      var logs = JSON.parse( sessionStorage.getItem( "reclog" + id ) );
      showLog( logs, "loc01" );
      $( "#spinner01" ).hide();
    } else {
      google.script.run
        .withSuccessHandler( logsToCache )
        .getLogEntries( id, "loc01" );
    }

  }
  function sleep ( ms ) {
    return new Promise( ( resolve ) => setTimeout( resolve, ms ) );
  }

  function contactInfo ( id = sessionStorage.getItem( "lastId" ) ) {
    if ( id == undefined || id == null || id == "" ) {
      alert( "no id at contactInfo()" );
    }
    $( '#foundGoals' ).empty();
    if ( sessionStorage.getItem( "rec" + id.toString() ) != null ) {
      console.log( "rec + id key was not null" );
      showContactInfo( sessionStorage.getItem( "rec" + id.toString() ) );
    } else {
      console.log( "rec + id key was null" );
      google.script.run
        .withSuccessHandler( showContactInfo )
        .getRecord( id.toString() );
    }

    // google.script.run
    //   .withSuccessHandler(showNotes)
    //   .getNotes(id);
  }
  // function showNotes(notes) {
  //   $("#notes2").val(notes);
  // }
  function showTBsnippetGl ( goalObj ) {
    var snippet = goalObj.snip;
    console.log( 'snippet is %s', snippet );
    $( "#tbSnippetCopy" ).text( snippet );
    $( "#tbSnippetCopy" ).select();
    document.execCommand( "copy" );
    showToast( 'goal copied; type "/gl" starting in date field' );

    document.body.style.cursor = "default";
  }

  function store ( records ) {
    if ( $( "#seis_id" ).val() == null ) {
      // setTimeout(
      //   function () {
      //     store(records);
      //   }, 500);
    }
    // var id = $('#seis_id').val();
    // records.forEach(function (el, i) {
    // const key = 'rec' + el[0];
    // sessionStorage[key] = JSON.stringify(el);
    // console.log(sessionStorage[key]);
    // });

    // this isn't necessary b/c it just received id as a param from server
    // google.script.run
    //   .saveLastId(id);

    // var loc = 'loc01';
    // printLogs(id, loc);
    document.body.style.cursor = "default";
  }
  function printLogs ( id, loc, startDate, endDate ) {
    google.script.run
      .withSuccessHandler( showLog )
      .getLogEntries( [ id, loc, startDate, endDate ] );
  }



  function findGoals_m () {
    var glLvl = $( "#m-glLvl" ).children( "option:selected" ).val();
    var glLvlElid = $( "#m-glLvl" ).children( "option:selected" ).attr( "id" );

    var glArea = $( "#m-glArea" ).children( "option:selected" ).val();
    var glAreaElid = $( "#m-glArea" ).children( "option:selected" ).attr( "id" );

    var id = $( "#seis_id" ).val();
    // console.log("data passed to goal search: %s, %s, %s", glLvl, glArea, id);

    sessionStorage.setItem( "glLvl", glLvl );
    sessionStorage.setItem( "glArea", glArea );
    var search = glLvl + "_" + glArea;

    if ( sessionStorage.getItem( "goals" + search ) ) {
      // console.log('getting items from cache for ' + search);
      showGoals( sessionStorage.getItem( "goals" + search ) );
    } else {
      google.script.run
        .withSuccessHandler( showGoals_m )
        .getGoalListItems( [ glLvl, glArea, id ] );
    }
    // returns [[gId, gLvl, gArea, gDmn, gAnl, gO1, gO2, gO3]]
  }
  function getAllLevSnipForTB () {
    var id = $( "#seis_id" ).val();
    if ( sessionStorage[ "lSnp" + $( "#seis_id" ).val() ] != null ) {
      showTBsnippet( sessionStorage[ "lvlsSnp" + $( "#seis_id" ).val() ] );
    } else {
      google.script.run
        .withSuccessHandler( showTBsnippet )
        .getPresentLevelsAsTextBlazeListItem( id );
    }
  }
  function getAllLevSnipForGoal () {
    var id = $( "#seis_id" ).val();
    if ( sessionStorage[ "lSnp" + $( "#seis_id" ).val() ] != null ) {
      makeGoalSnip( sessionStorage[ "lvlsSnp" + $( "#seis_id" ).val() ] );
    } else {
      google.script.run
        .withSuccessHandler( makeGoalSnip )
        .getPresentLevelsAsTextBlazeListItem( id );
    }
  }

  // show functions ; functions named show... should be call backs success handlers
  // that display data retrieved from a script run on the server
  function showContactInfo ( record ) {
    console.log( record );
    record = JSON.parse( record );

    function shortDate ( dateObj ) {
      return dayjs( dateObj ).format( "MM/DD/YYYY" );
    }


    console.log( "record = %s", JSON.stringify( record ) );
    var key = "rec" + record.seis_id;
    sessionStorage.setItem( key, JSON.stringify( record ) );

    $( "#disability_1_code" ).val( record.disability_1_code );
    $( "#disability_2_code" ).val( record.disability_2_code );
    $( "#date_of_last_eligibility_evaluation" ).val(
      shortDate( record.date_of_last_eligibility_evaluation )
    );
    $( "#date_of_last_annual_plan_review" ).val(
      shortDate( record.date_of_last_annual_plan_review )
    );
    $( "#husd_id" ).val( record.student_id );
    $( "#first_name" ).val( record.first_name );
    $( "#last_name" ).val( record.last_name );
    $( "#langflu" ).val( record.langflu );
    $( "#corrlng" ).val( record.corrlng );
    $( "#gradeCode" ).val( record.grade_code );
    $( "#stuName" ).val( record.first_name + " " + record.last_name );
    $( "#namenav" ).text( record.first_name + " " + last_name );
    $( "#dob" ).val( shortDate( record.date_of_birth ) );
    $( "#parent_guardian_1_name" ).val( record.parent_guardian_1_name );
    $( "#parent_1_home_phone" ).attr( "title", "cell/home" );
    $( "#parent_1_home_phone" ).val(
      record.parent_1_cell_phone + "; " + record.parent_1_home_phone
    );
    $( "#u1_phone" ).attr( "title", "work/other" );
    $( "#parent_1_email" ).val( record.parent_1_email );
    $( "#sex" ).val( record.gender.toString() );
    $( "#teachname" ).val( record.teachname );
    $( "#teachemail" ).val( record.teachemail );
    $( "#addStr" ).val( record.parent_1_mail_address );
    $( "#addCity" ).val( record.parent_1_mail_city );
    $( "#addZip" ).val( record.parent_1_mail_zip );
    $( "#seis_id" ).val( record.seis_id );
    $( "#stuemail" ).val(
      (
        record.first_name.toString()[ 0 ] +
        record.last_name.toString()[ 0 ] +
        record.student_id +
        "@stu.hemetusd.org"
      ).toLowerCase()
    );
    $( "#nmjdob" ).val( record.nmjdob );
    $( "#teachemail" ).val( record.teachemail );
    $( "#notes2" ).val( record.notes2 );

    console.log( "nmjdob = %s", nmjdob );
    // console.log('nmjdob = %s', $("#nmjdob").val());

    if ( $( "#corrlng" ).val() == 1 ) {
      $( "#corrlng" ).css( "background-color", "#FF0000" );
      $( "#corrlng" ).css( "color", "#FFFFFF" );
    } else {
      $( "#corrlng" ).css( "color", "#000000" );
    }

    get_selGoals_from_server_clientSide();
  }

  function phoneFmt ( phone ) {
    if ( phone == null || phone == undefined || phone == "" ) {
      return "";
    }

    phone = phone.toString().replace( /[^0-9]/g, "" );
    return (
      phone.substr( 0, 3 ) +
      "-" +
      phone.substr( 3, 3 ) +
      "-" +
      phone.substr( 6 ) +
      " ; "
    );
  }

  function sndEm ( buttonVal ) {
    var params = {};
    var corrLang = $( "#corrlng" ).val().toString();
    if ( corrLang == "1" || corrLang == "01" ) {
      params[ "translate" ] = true;
    } else {
      params[ "translate" ] = false;
    }
    params[ "to" ] = $( "#emailRecipients" ).val();
    params[ "subj" ] = $( "#emailSubject" ).val();
    params[ "document" ] = $( "#emailBody" ).val();

    google.script.run
      .withSuccessHandler( copyToClipboard )
      .createDraftEmail( buttonVal, JSON.stringify( params ) );
  }
  function sndMassEm ( buttonVal ) {
    var params = {};
    var corrLang = $( "#corrlng" ).val().toString();
    if ( corrLang == "1" || corrLang == "01" ) {
      params[ "translate" ] = true;
    } else {
      params[ "translate" ] = false;
    }

    var toAsStr = "";
    $.each( $( "#emSelect" ).val(), function ( i, val ) {
      toAsStr += val + ",";
    } );
    $.each( $( "#teacherSelect" ).val(), function ( i, val ) {
      toAsStr += val + ",";
    } );

    // console.log('asStr = %s', toAsStr);

    params[ "to" ] = toAsStr;
    params[ "subj" ] = $( "#emailSubject" ).val();
    params[ "document" ] = $( "#emailBody" ).val();

    // console.log('params = %s', JSON.stringify(params));
    // return;
    google.script.run
      .withSuccessHandler( copyToClipboard )
      .createDraftEmail( buttonVal, JSON.stringify( params ) );
  }
  function editGoalInModal ( goal ) {
    $( "#spinner01" ).show();
    var myModal = new bootstrap.Modal( document.getElementById( "goalModal" ), {
      focus: true,
    } );
    $( "#glEditId" ).val( goal.id );
    $( "#glEditLvl" ).val( goal.lvl );
    $( "#glEditStrand" ).val( goal.strand );
    $( "#glEditAnnual" ).val( goal.annual );
    $( "#glEditArea" ).val( goal.area );
    $( "#glEditStandard" ).val( goal.standard );
    $( "#glEditobj1" ).val( goal.objective1 );
    $( "#glEditobj2" ).val( goal.objective2 );
    $( "#glEditobj3" ).val( goal.objective3 );
    $( "#timestamp" ).val( goal.timestamp );

    myModal.show();
    $( "#spinner01" ).hide();

    // goal is a goal object from 'getGoal'
    // this.id = id;
    // this.lvl = grdLvl;
    // this.area = area;
    // this.strand = strand;
    // this.annual = annual;
    // this.standard = standard;
    // this.objective1 = objctv1;
    // this.objective2 = objctv2;
    // this.objective3 = objctv3;

    // $('#goalModal').modal({
    //   focus: true
    // });
  }
  function clearEmailFields () {
    $( "textarea.email" ).val( "" );
  }
  // this is a bit of code I stole from w3 schools; works great!;
  // together with the code in the HTML file, this allows sorting by columns when the headings are clicked
  function sortTable ( t_id, n ) {
    //     console.log('sortTable args = %s, %s', t_id, n);
    var table,
      rows,
      switching,
      i,
      x,
      y,
      shouldSwitch,
      dir,
      switchcount = 0;
    table = document.getElementById( "rosterList" );
    switching = true;
    // Set the sorting direction to ascending:
    dir = "asc";
    /* Make a loop that will continue until
    no switching has been done: */
    while ( switching ) {
      // Start by saying: no switching is done:
      switching = false;
      rows = table.rows;
      /* Loop through all table rows (except the
      first, which contains table headers): */
      for ( i = 1; i < rows.length - 1; i++ ) {
        // Start by saying there should be no switching:
        shouldSwitch = false;
        /* Get the two elements you want to compare,
        one from current row and one from the next: */
        x = rows[ i ].getElementsByTagName( "TD" )[ n ];
        y = rows[ i + 1 ].getElementsByTagName( "TD" )[ n ];
        /* Check if the two rows should switch place,
        based on the direction, asc or desc: */
        if ( dir == "asc" ) {
          if ( x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase() ) {
            // If so, mark as a switch and break the loop:
            shouldSwitch = true;
            break;
          }
        } else if ( dir == "desc" ) {
          if ( x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase() ) {
            // If so, mark as a switch and break the loop:
            shouldSwitch = true;
            break;
          }
        }
      }
      if ( shouldSwitch ) {
        /* If a switch has been marked, make the switch
        and mark that a switch has been done: */
        rows[ i ].parentNode.insertBefore( rows[ i + 1 ], rows[ i ] );
        switching = true;
        // Each time a switch is done, increase this count by 1:
        switchcount++;
      } else {
        /* If no switching has been done AND the direction is "asc",
        set the direction to "desc" and run the while loop again. */
        if ( switchcount == 0 && dir == "asc" ) {
          dir = "desc";
          switching = true;
        }
      }
    }
  }

  function filterLogEntriesByDateWindow () {
    //     console.log('fired');
    //     console.log('current start date: %s; end date: %s', $('#stDtEdit').val(), $('#endDtEdit').val());
    var logEntries = JSON.parse(
      sessionStorage.getItem( "reclog" + $( "#seis_id" ).val() )
    );
    var keepers = [];
    for ( let i = 0; i < logEntries.length; i++ ) {
      const el = logEntries[ i ];
      var start = dayjs( $( "#stDtEdit" ).val() );
      var end = dayjs( $( "#endDtEdit" ).val() );
      if (
        dayjs( el[ 0 ] ).isBefore( end.add( 1, "d" ) ) &&
        dayjs( el[ 0 ] ).isAfter( start )
      ) {
        //         console.log('%s is before %s', dayjs(el[0]).format('YYYY-MM-DD'), end.format('YYYY-MM-DD'));
        keepers.push( el );
      }
    }
    sessionStorage.setItem( "logPrintItems", JSON.stringify( keepers ) );
    showLog( keepers, "loc04" );
  }

  function printSelectedLogEntries () {
    // $('#spinner02').show();
    document.body.style.cursor = "wait";

    var stuName = $( "#stuName" ).val();
    var array = sessionStorage.getItem( "logPrintItems" );
    var sDate = $( "#stDtEdit" ).val().toString();
    var eDate = $( "#endDtEdit" ).val().toString();

    google.script.run
      .withSuccessHandler( showUrl )
      .printSelectedLogEntries( stuName, sDate, eDate, array );
  }

  async function showUrl ( obj ) {
    var msg = obj.msg;
    var filename = obj.filename;
    var url = obj.url;
    $( "#pdfUrl" ).html(
      "<p>" +
      msg +
      "</p>" +
      "\n" +
      '<a href="' +
      url +
      '" target="_blank">' +
      filename +
      "</a>"
    );
    document.body.style.cursor = "default";
    sleep( 1000 );

    // $('#spinner02').hide();
  }

  // clears new log entry field and resets button colors
  function showLogUpdates ( record ) {
    //update the browser cache with saved data
    var key = "rec" + record[ 0 ];
    sessionStorage[ key ] = JSON.stringify( record );
    // console.log(sessionStorage[key]);
    // get contact logs
    $( "#logEntry" ).val( "" );
    document.body.style.cursor = "default";
    $( "#saveEntry" ).attr( "class", "btn btn-sm btn-success my-1 svChngs" );
  }
  // display table of names sorted by due dates
  function showRosterTable ( dataStr ) {
    // console.log('data is %s', dataStr);
    var data = JSON.parse( dataStr );
    var loc = "loc00";
    var pending = [ "#ffffff", "#000000" ];
    for ( let i = 0; i < data.length; i++ ) {
      const el = data[ i ];
      var [
        seis_id,
        last_name,
        first_name,
        date_of_birth,
        case_manager,
        gender,
        grade_code,
        date_of_last_annual_plan_review,
        date_of_next_annual_plan_review,
        date_of_last_eligibility_evaluation,
        date_of_next_eligibility_evaluation,
        date_of_initial_parent_consent,
        parent_guardian_1_name,
        parent_1_email,
        parent_1_cell_phone,
        parent_1_home_phone,
        parent_1_work_phone_h1,
        parent_1_other_phone,
        parent_1_mail_address,
        parent_1_mail_city,
        parent_1_mail_zip,
        disability_1_code,
        disability_2_code,
        nmjdob,
        student_id,
        tchr_num,
        teachname,
        total_minutes___frequency,
        frequency,
        location,
        firstname_lastname,
        langflu,
        corrlng,
        teachemail,
        stuemail,
        firslinit,
        allServices,
        notes2,
      ] = el;
      //       console.log(JSON.stringify(el));
      list = $( "#" + loc + "tb" );

      if ( !seis_id ) {
        alert( " has no id" ); // lnCmafn +
      } else {
        if ( dayjs( date_of_next_eligibility_evaluation ).isValid() == false ) {
          var evalDate = dayjs( date_of_initial_parent_consent )
            .add( 1, "s" )
            .format( "YYYY-MM-DD" );
          pending = [ "#f4cccc", "#000000" ];
        } else if (
          dayjs( date_of_next_eligibility_evaluation )
            .add( 3, "y" )
            .isBefore( dayjs().add( 6, "month" ) )
        ) {
          evalDate = dayjs( date_of_next_eligibility_evaluation ).format(
            "YYYY-MM-DD"
          );
          pending = [ "#d9ead3", "#000000" ];
        } else {
          evalDate = dayjs( date_of_next_eligibility_evaluation ).format(
            "YYYY-MM-DD"
          );
          pending = [ "#FFFFFF", "#000000" ];
        }
        // console.log('evalDate hello is %s for %s', evalDate, first_name);
        list.append(
          '<tr class="d-flex"><td class="setStudent  col-6" data-stuId=' +
          seis_id +
          "> " +
          last_name +
          ", " +
          first_name +
          "</td>" +
          '<td class="tableDate setStudent col-3" data-stuId=' +
          seis_id +
          ">" +
          dayjs( date_of_next_annual_plan_review ).format( "YYYY-MM-DD" ) +
          "</td>" +
          '<td class="tableDate setStudent col-3" style="background-color:' +
          pending[ 0 ] +
          "; color:" +
          pending[ 1 ] +
          ';" data-stuId=' +
          seis_id +
          ">" +
          dayjs( evalDate ).format( "YYYY-MM-DD" ) +
          "</td>" +
          "</tr></div>"
        );
      }
    }
    store( data );
    $( "#spinner01" ).hide();
    return "rosterList", 0;
  }

  // bindSetStudentClick();
  // show upcoming iep meetings on the calendar
  function showCalData ( data ) {
    // console.log('the data: %s', JSON.stringify(data));
    $( "#loc00hd" ).empty();
    parsedData = JSON.parse( data );
    for ( let i = 0; i < parsedData.length; i++ ) {
      var [ a, b, c, d, e, f, g, h ] = parsedData[ i ];
      var p = dayjs( c, "YYYY-MM-DDTHH:mm" );
      var q = dayjs();

      $( "#loc00hd" ).append(
        "<li ' class='upcomingEvent'>" +
        dayjs( c, "YYYY-MM-DDTHH:mm" ).format( "dd MM-DD-YY @ HH:mm" ) +
        "     " +
        b +
        "; \n" +
        f +
        "\n"
      );
      document.body.style.cursor = "default";
    }
  }
  /**
   *
   * @param searchAndItems [search term in form 'gradeLevel_area' , last search result]
   *
   */
  function showGoals ( goalListItemsArray ) {
    // console.log(goalListItemsArray);
    $( "#glLst" ).empty();

    for ( let i = 0; i < goalListItemsArray.length; i++ ) {
      const element = goalListItemsArray[ i ];
      $( "#glLst" ).append( element );
    }

    document.body.style.cursor = "default";
  }
  function showGoals_m ( goalListItemsArray ) {
    // console.log(goalListItemsArray);
    $( "#m-glLst" ).empty();

    for ( let i = 0; i < goalListItemsArray.length; i++ ) {
      const element = goalListItemsArray[ i ];
      $( "#m-glLst" ).append( element );
    }

    document.body.style.cursor = "default";
  }
  function showTBsnippet ( snippet ) {
    //     console.log('snippet is: %s', JSON.stringify(snippet));

    $( "#tbSnippetCopy" ).text( snippet );
    $( "#tbSnippetCopy" ).select();
    document.execCommand( "copy" );
    document.body.style.cursor = "default";
  }

  function snipInfo () {
    var id = $( "#seis_id" ).val();
    google.script.run
      .withSuccessHandler( appendSnips )
      .getPresentLevelsAsTextBlazeListItem( id );
  }

  function appendSnips ( levelsSnip ) {
    var snip = "[";
    snip += '"corrlng"="' + $( "#corrlng" ).val() + '"';
    snip += ',"nm"="' + $( "#stuName" ).val() + '"';
    snip +=
      ',"fn"="' +
      $( "#stuName" )
        .val()
        .toString()
        .replace( /([A-Z]{1}[a-z]+) ([A-Z]{1}[a-z]+) ([A-Z]{1}[A-z]+$)/, "$1" ) +
      '"';
    snip +=
      ',"ln"="' +
      $( "#stuName" )
        .val()
        .toString()
        .replace( /([A-Z]{1}[a-z]+) ([A-Z]{1}[a-z]+) ([A-Z]{1}[A-z]+$)/, "$2" ) +
        .replace( /([A-Z]{1}[a-z]+) ([A-Z]{1}[A-z]+)/, "$2 $3" ) +
      '"';
    snip += ',"dob"="' + $( "#dob" ).val() + '"';
    snip += ',"sex"="' + $( "#sex" ).val() + '"';
    snip += ',"par"="' + $( "#parent_guardian_1_name" ).val() + '"';
    snip += ',"ph1"="' + $( "#parent_1_home_phone" ).val() + '"';
    snip += ',"ph2"="' + $( "#u1_phone" ).val() + '"';
    snip += ',"pem1"="' + $( "#parent_1_email" ).val() + '"';
    snip += ',"pem2"="' + $( "#u3_parent_1a_email" ).val() + '"';
    snip += ',"tem"="' + $( "#teachemail" ).val() + '"';
    snip += ',"tch"="' + $( "#teachname" ).val() + '"';
    snip += ',"sid"="' + $( "#seis_id" ).val() + '"';

    snip += ',"lst1"="' + $( "#date_of_last_annual_plan_review" ).val() + '"';
    snip += ',"lst3"="' + $( "#date_of_last_eligibility_evaluation" ).val() + '"';

    // snip += ',"id"="' +
    snip +=
      ',"sem"="' +
      $( "#stuemail" )
        .val()
        .toString()
        .replace( /[A-z]{2}(\d{6}).*/, "$1" ) +
      '"';
    snip += "]";
    // console.log(snip);

    if ( levelsSnip == "not found" ) {
      levelsSnip = '["not found"="not found"]';
      // do nothing
    } else {
      // combine snips
      snip = snip.toString().replace( /\]/, "," );
      // console.log(snip);
      levelsSnip = levelsSnip.toString().replace( /\[/, "" );
      // console.log(levelsSnip);
      snip = snip.toString() + levelsSnip.toString();
    }
    // copy the whole thing to the clipboard
    //     console.log('snip is: %s', JSON.stringify(snip));
    copyToClipboard( snip );
  }
  function copyToClipboard ( content ) {
    var container = document.createElement( "div" );
    container.textContent = content;
    container.style.position = "fixed";
    container.style.pointerEvents = "none";
    container.style.opacity = 0;
    document.body.appendChild( container );
    window.getSelection().removeAllRanges();
    var range = document.createRange();
    range.selectNode( container );
    window.getSelection().addRange( range );
    document.execCommand( "copy" );
    document.body.removeChild( container );
    showToast( "data copied to clipboard" );

    // alert("The data has been copied as a TextBlaze key-value list to the clipboard.");
  }

  function showToast ( msg ) {
    $( "#toastMsg" ).html( "<h6>" + msg + "</h6>" );
    $( ".toast" ).toast( "show" );
    document.body.style.cursor = "default";
  }

  function saveGoal ( newReplace ) {
    if ( newReplace === -1 ) {
      var glEditId = -1;
    } else {
      var glEditId = parseInt( $( "#glEditId" ).val(), 10 );
    }

    var obj = {};

    obj.glEditId = glEditId;
    obj.glEditLevel = parseInt( $( "#glEditLvl" ).val(), 10 );
    obj.glEditArea = $( "#glEditArea" ).val().toString().replace( /\n/g, " " );
    obj.glEditStrand = $( "#glEditStrand" ).val().toString().replace( /\n/g, " " );
    obj.glEditStandard = $( "#glEditStandard" )
      .val()
      .toString()
      .replace( /\n/g, " " );
    obj.glEditAnnual = $( "#glEditAnnual" ).val().toString().replace( /\n/g, " " );
    obj.glEditObj1 = $( "#glEditobj1" ).val().toString().replace( /\n/g, " " );
    obj.glEditObj2 = $( "#glEditobj2" ).val().toString().replace( /\n/g, " " );
    obj.glEditObj3 = $( "#glEditobj3" ).val().toString().replace( /\n/g, " " );
    obj.timestamp = new Date().toLocaleDateString().replace( /\n/g, " " );

    // console.log('data = %s', JSON.stringify(data));
    // console.log('data is %s', JSON.stringify(obj));
    google.script.run.withSuccessHandler( saveGoalSuccess ).saveGoalSS( obj );
  }
  function saveGoalSuccess ( value ) {
    // console.log('returned: %s', value);
    findGoals();
  }

  function firstSnipThenGvoice () {
    snipInfo();
    setTimeout( function () {
      window.open(
        "https://voice.google.com/u/0/messages/",
        ( target = "_blank" )
      );
    }, 2000 );
  }
  function successMsg ( msgAndUrlJSON ) {
    var object = JSON.parse( msgAndUrlJSON );
    var msg = object.msg;
    var url = object.url;
    document.body.style.cursor = "default";
    showToast( msg, url );
  }

  function NORMSDIST ( z ) {
    // Uses https://cdn.jsdelivr.net/jstat/latest/jstat.min.js
    if ( isNaN( z ) ) return "#VALUE!";
    var mean = 0,
      sd = 1;
    return jStat.normal.cdf( z, mean, sd );
  }

  function getPointer () {
    if ( sessionStorage.getItem( "lastId" ) == null ) {
      google.script.run.withSuccessHandler( getPointer ).getFirstPointer();
    }
    return sessionStorage.getItem( "lastId" );
  }
  function setPointer ( id ) {
    try {
      sessionStorage.setItem( "lastId", id.toString() );
    } catch ( error ) {
      google.script.run.withSuccessHandler( setPointer ).getFirstPointer();
    }
  }

  function deleteRecord () {
    if ( confirm( "Are you sure you want to remove this record?" ) == true ) {
      var id = $( "#seis_id" ).val();
      //     console.log('the id to delete is %s', id);
      sessionStorage.removeItem( "rec" + id );
      google.script.run
        .withSuccessHandler() // reload
        .withFailureHandler()
        .deleteRecord( id );
    }
  }
  // function deleteRecordConfirmed() {
  //   var id = $("#seis_id").val();
  //   //     console.log('the id to delete is %s', id);
  //   google.script.run
  //     .withSuccessHandler(reloadMe) // reload
  //     .withFailureHandler()
  //     .deleteRecord(id);
  // }
  function openAddStudentModal () {
    $( "#addStuModal" ).modal( {
      focus: true,
    } );
  }
  function openRosterChecklistModal () {
    google.script.run
      .withSuccessHandler( showRosterChecklist )
      .getTableData_roster();
    $( "#checklist" ).modal( {
      focus: true,
    } );
  }

  function addStu () {
    var obj = {};
    obj.first = $( "#addFn" ).val();
    obj.last = $( "#addLn" ).val();
    obj.StudentID = $( "#StudentID" ).val();
    obj.lastAnnual = $( "#lastAnnual" ).val();
    obj.lastEval = $( "#lastEval" ).val();
    obj.seisID = $( "#seisID" ).val();

    // console.log(JSON.stringify(obj));

    google.script.run
      .withSuccessHandler( reloadMe )
      .addStudentByIdFromRESstudentsServer( obj );
  }

  // display table of names sorted by due dates
  function showRosterChecklist ( data ) {
    var loc = "modal00";

    var pending = [ "#ffffff", "#000000" ];
    for ( let i = 0; i < data.length; i++ ) {
      const el = data[ i ];
      var [
        seis_id,
        last_name,
        first_name,
        date_of_birth,
        case_manager,
        gender,
        grade_code,
        date_of_last_annual_plan_review,
        date_of_next_annual_plan_review,
        date_of_last_eligibility_evaluation,
        date_of_next_eligibility_evaluation,
        date_of_initial_parent_consent,
        parent_guardian_1_name,
        parent_1_email,
        parent_1_cell_phone,
        parent_1_home_phone,
        parent_1_work_phone_h1,
        parent_1_other_phone,
        parent_1_mail_address,
        parent_1_mail_city,
        parent_1_mail_zip,
        disability_1_code,
        disability_2_code,
        nmjdob,
        student_id,
        tchr_num,
        teachname,
        total_minutes___frequency,
        frequency,
        location,
        firstname_lastname,
        langflu,
        corrlng,
        teachemail,
        stuemail,
        firslinit,
        allServices,
        notes,
      ] = el;
      //       console.log(JSON.stringify(el));
      list = $( "#" + loc + "tb" );

      if ( !seis_id ) {
        alert( " has no id" ); // lnCmafn +
      } else {
        if ( dayjs( date_of_last_eligibility_evaluation ).isValid() == false ) {
          var evalDate = dayjs( date_of_initial_parent_consent )
            .add( 1, "s" )
            .format( "YYYY-MM-DD" );
          pending = [ "#f4cccc", "#000000" ];
        } else if (
          dayjs( date_of_last_eligibility_evaluation )
            .add( 3, "y" )
            .isBefore( dayjs().add( 6, "month" ) )
        ) {
          evalDate = dayjs( date_of_last_eligibility_evaluation ).format(
            "YYYY-MM-DD"
          );
          pending = [ "#d9ead3", "#000000" ];
        } else {
          evalDate = dayjs( date_of_last_eligibility_evaluation ).format(
            "YYYY-MM-DD"
          );
          pending = [ "#FFFFFF", "#000000" ];
        }
        // console.log('evalDate hello is %s for %s', evalDate, first_name);
        list.append(
          '<tr class="d-flex"><td class="setStudent  col-6" data-stuId=' +
          seis_id +
          "> " +
          last_name +
          ", " +
          first_name +
          "</td>" +
          '<td class="tableDate setStudent col-3" data-stuId=' +
          seis_id +
          ">" +
          dayjs( date_of_last_annual_plan_review ).format( "YYYY-MM-DD" ) +
          "</td>" +
          '<td class="tableDate setStudent col-3" style="background-color:' +
          pending[ 0 ] +
          "; color:" +
          pending[ 1 ] +
          ';" data-stuId=' +
          seis_id +
          ">" +
          dayjs( evalDate ).format( "YYYY-MM-DD" ) +
          "</td>" +
          "</tr></div>"
        );
      }
    }
    store( data );
    $( "#spinner01" ).hide();

    return "rosterList", 0;
  }
  function lookForTemails ( event ) {
    var id = $( "#seis_id" ).val();
    if ( event.shiftKey ) {
      google.script.run
        .withSuccessHandler( putInLogEntry )
        .lookForTeachers( id, true );
    } else {
      google.script.run
        .withSuccessHandler( putInLogEntry )
        .lookForTeachers( id, false );
    }
  }
  function putInLogEntry ( data ) {
    $( "#logEntry" ).val( data );
  }
  function clearCache () {
    sessionStorage.clear();
  }
  function reloadMe ( url ) {
    // return ScriptApp.getService().getUrl().toString();
    alert( "reload this page to complete the update" );
    // $("body").html('<a style="font-size: 3rem;  position: fixed; top:20%; left:20%;" href=' + url + '>Click to reload.</a>');
  }
  function findStuFolder () {
    var id, fname, lname;
    id = $( "#seis_id" ).val();
    fname = $( "#first_name" ).val();
    lname = $( "#last_name" ).val();

    google.script.run.withSuccessHandler( openUrl ).getStuFolder( fname, lname );
  }
  function openUrl ( url ) {
    window.open( url, ( target = "_blank" ) );
  }
  function getPrefilledLevels () {
    var id = $( "#seis_id" ).val();
    var stuName = $( "#stuName" ).val();
    var teachemail = $( "#teachemail" ).val();
    // console.log("sendPFLQToTchr() fired; running server script with params: " + stuName + "; " + id + "; " + tem);

    google.script.run
      .withSuccessHandler( copyToClipboard )
      .sendLevelsForm( stuName, id, teachemail );
  }
  function openDoc ( url ) {
    copyToClipboard( url );
    // window.open(url, "_blank");
  }
  function goToSeisIep () {
    var url = "https://seis.org/iep/";
    url += $( "#seis_id" ).val();
    url += "/29368995/forms";
    window.open( url, "_blank" );
  }
  function sendLevelsQues () {
    console.log( "send levels button clicked" );
    var id = $( "#seis_id" ).val();
    var stuName = $( "#stuName" ).val();
    var teachemail = $( "#teachemail" ).val();
    // console.log("sendPFLQToTchr() fired; running server script with params: " + stuName + "; " + id + "; " + tem);
    var mLvlAry = [
      $( "#stuName" ).val(),
      $( "#seis_id" ).val(),
      $( "#teachemail" ).val(),
    ];
    google.script.run.withSuccessHandler( alert( 'a draft email has been created' ) ).sendLevelsForm( mLvlAry );
  }
  // function openMailModal(objStr) {
  //   // emailData = {
  //   //     "recipients": <string>,
  //   //     "subject": "levels of performance for " + stuName,
  //   //     "document": "Here is the url: " + levelsUrl
  //   // };

  //   var obj = JSON.parse(objStr);
  //   var myModal = new bootstrap.Modal(document.getElementById('mailModal'));
  //   myModal.show();

  //   $("#emailRecipients").val(obj.recipients);
  //   $("#emailSubject").val(obj.subject);
  //   $("#emailBody").html('&lt;a href=' + obj.levelsUrl + '&gt;Here is the url: &lt;/a&gt;');

  // }

  function logServices ( string ) {
    $( "#logEntry" ).val( string );
    saveNewLogEntryClient();
  }

  function saveNewLogEntryClient () {
    console.log( $( "#logEntry" ).val().toString() );
    document.body.style.cursor = "wait";
    if ( $( "#logEntry" ).val().toString().length > 0 ) {
      if ( $( "#logEntry" ).val().toString() == "serve" ) {
        google.script.run
          .withSuccessHandler( logServices )
          .getServices( $( "#seis_id" ).val() );
        return;
      }
      var logObj = new LogEntry();
      // console.log($('entry is gt 0: %s', $("#logEntry").val().toString()));
      // console.log('id and entry are %s and %s', id, entry);
      console.log( "saving: %s", JSON.stringify( logObj ) );

      google.script.run
        .withSuccessHandler( updateLogEntryCache ) // server returns the same object
        .saveNewLogEntryServer( logObj );
    }
    document.body.style.cursor = "default";
    $( "#logEntry" ).val( "" );
  }
  function logsToCache ( allRecords ) {
    // console.log('allRecords = %s', allRecords);

    allRecords = JSON.parse( allRecords );
    for ( let i = 0; i < allRecords.length; i++ ) {
      const elAll = allRecords[ i ];
      // these records have id numbers at 0; within each id number item lies a 2-d array with contact log entries
      var key = "reclog" + elAll[ 0 ];
      var val = JSON.stringify( elAll[ 1 ] );
      sessionStorage.setItem( key, val );
    }

    focus( sessionStorage.getItem( "lastId" ) );
  }
  function openLogPrintDialog () {
    $( "#logModal" ).modal( {
      focus: true,
    } );
    $( "#pdfUrl" ).empty();
    $( "#printedLogsth" ).empty();
    $( "#printedLogstb" ).empty();
    $( "#printLogStuName" ).html( "<h4>" + $( "#stuName" ).val() + "</h4>" );
    var start = dayjs().subtract( 1, "y" ).toDate();
    var end = dayjs().toDate();
    document.getElementById( "endDtEdit" ).valueAsDate = end;
    document.getElementById( "stDtEdit" ).valueAsDate = start;

    // var logCache = filterLogEntriesByDateWindow();
    // showLog(logEntries, 'loc04');
    filterLogEntriesByDateWindow();
    // $('#spinner02').hide();
  }
  function showLog ( logEntries, loc ) {
    // [entries, id]
    // input is an array containing one arrays and one string ('loc'): array contains all the log entries that correspond to that record
    //     console.log('in "showLog" the first log entry is: %s; the loc is %s', JSON.stringify(logEntries[0]), loc);
    //     console.log('logEntries is a type of %s', typeof logEntries);
    if ( typeof logEntries == "string" ) {
      logEntries = JSON.parse( logEntries );
    }

    var list = $( "#" + loc );
    list.empty();

    var stuName = First_Name + " " + Last_Name;
    for ( var i = 0; i < logEntries.length; i++ ) {
      var el = logEntries[ i ];
      var [
        Timestamp,
        email,
        studentMC,
        log_entry,
        logId,
        seis_id,
        Last_Name,
        First_Name,
        First_Name,
        Student_ID,
      ] = el;
      list.append(
        '<tr class="d-flex">' +
        "<td data-entry_id=" +
        logId +
        ' class="col-3 logEntry"' +
        'data-toggle="tooltip" data-placement="right" ' +
        'title= "double-click to edit">' +
        dayjs( el[ 0 ] ).format( "YYYY-MM-DD" ) +
        "</td>" +
        "<td data-entry_id=" +
        logId +
        ' class="logEntry col-9">' +
        el[ 3 ] +
        "</td>" +
        "</tr>"
      );
    }
    $( "#corrlng[value='01']", function () {
      $( this ).css( "background-color", "#ff0000" );
    } );

    $( "#" + "loc01" + "tb" ).show();

    document.body.style.cursor = "default";
  }

  function saveEditedLogEntryClient ( remove ) {
    if ( remove == true ) {
      if ( confirm( "Are you sure you want to remove this log entry?" ) == false ) {
        return;
      }
    }
    var entry = $( "#editEntry" ).val();
    var date = $( "#editDate" ).val();
    var id = $( "#editId" ).val();
    var nmjdob = $( "#nmjdob" ).val();
    var seis_id = $( "#seis_id" ).val();

    console.log( "vars %s; %s; %s; %s; %s; ", entry, date, id, nmjdob, seis_id );
    var logObj = {
      logEntry: entry,
      logDate: date,
      logId: id,
      nmjdob: nmjdob,
      seis_id: seis_id,
      remove: remove,
    };
    console.log( "logObj: %s", JSON.stringify( logObj ) );

    google.script.run
      .withSuccessHandler( saveLogEntrySuccess )
      .saveEditedLogEntryServer( JSON.stringify( logObj ) );
  }

  function LogEntry () {
    // as passed from jquery function or from log entry editor (in the former case, there will be no logId value)
    //  log-entry-obj =
    //  {
    //     "seis_id": id,
    //     "logEntry": entry,
    //     "nmjdob": nmjdob,
    //     "logId":
    //  }
    this.logEntry = $( "#logEntry" ).val().toString();
    this.logId = null;
    this.seis_id = $( "#seis_id" ).val().toString();
    this.nmjdob = $( "#nmjdob" ).val().toString();
    return this;
  }
  function updateLogEntryCache ( array ) {
    var [ logObjStr, cacheRow ] = array;
    var logObj = JSON.parse( logObjStr );
    console.log( "caching...logObj is %s", JSON.stringify( logObj ) );

    var logCache = JSON.parse(
      sessionStorage.getItem( "reclog" + logObj.seis_id )
    );
    logCache.unshift( JSON.parse( cacheRow ) );
    sessionStorage.setItem( "reclog" + logObj.seis_id, JSON.stringify( logCache ) );

    refreshLogDisplay( logCache, "loc01" );
  }
  function refreshLogDisplay ( logCache, loc ) {
    // [entries, id]
    var list = $( "#" + loc );
    list.empty();

    for ( var i = 0; i < logCache.length; i++ ) {
      var el = logCache[ i ];
      var [
        Timestamp,
        email,
        studentMC,
        log_entry,
        logId,
        seis_id,
        Last_Name,
        First_Name,
        First_Name,
        Student_ID,
      ] = el;
      list.append(
        '<tr class="d-flex">' +
        "<td data-entry_id=" +
        logId +
        ' class="col-3 logEntry"' +
        'data-toggle="tooltip" data-placement="right" ' +
        'title= "double-click to edit">' +
        dayjs( el[ 0 ] ).format( "YYYY-MM-DD" ) +
        "</td>" +
        "<td data-entry_id=" +
        logId +
        ' class="logEntry col-9">' +
        el[ 3 ] +
        "</td>" +
        "</tr>"
      );
    }
    $( "#corrlng[value='01']", function () {
      $( this ).css( "background-color", "#ff0000" );
    } );

    $( "#" + "loc01" + "tb" ).show();

    document.body.style.cursor = "default";
  }

  <script>

$( document ).ready( function () {

  // idleLogout();
  // function idleLogout() {
  var t;
  window.addEventListener( "mousemove", resetTimer, true );
  window.addEventListener( "mousedown", resetTimer, true );
  window.addEventListener( "mousedown", resetTimer, true );
  window.addEventListener( "touchstart", resetTimer, true );
  window.addEventListener( "click", resetTimer, true );
  window.addEventListener( "keydown", resetTimer, true );
  window.addEventListener( 'scroll', resetTimer, true ); // improved; see comments
  function catchFail ( error ) { };

  function resetTimer () {
    clearTimeout( t );
    t = setTimeout( checkForNewLogEntries, 6000 );  // time is in milliseconds
  }
  function checkForNewLogEntries () {
  google.script.run
    .withSuccessHandler( catchCheck )
    .withFailureHandler( catchFail )
    .checkForNewLogEntryRecordInCache();
}

} );
